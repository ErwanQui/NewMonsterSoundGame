"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

////
// Monster
///
class Monster {
  constructor(data, audioContext) {
    this.azimuts = [];
    this.azimutSpeed = data.Speed;
    this.yell = audioContext.createBufferSource();
    this.yell.loop = true;
    this.yell.buffer = data.Sounds["MonsterSound" + Math.ceil(Math.random() * Object.keys(data.Sounds).length)];
    this.lifeTime = data.LifeTime;
    this.currentAzimutIndex = null;
    this.moveId = null;
    this.ambisonics = require('ambisonics');
    this.gain = audioContext.createGain();
    this.encoder = new this.ambisonics.monoEncoder(audioContext, 2);
    this.encoder.out.connect(data.SoundOut.in);

    this.disconnect = () => function () {
      console.log("devant");
    };
  }

  async start() {
    // console.log("go")
    this.gain.gain.setValueAtTime(0.5, 0);
    this.yell.connect(this.gain);
    this.gain.connect(this.encoder.in);
    this.azimuts.push(Math.floor(Math.random() * 361));
    this.previousAzimut = this.azimuts[0]; // console.log("bonjour")
    // console.log(this.lifeTime)

    for (let i = 1; i <= this.lifeTime; i++) {
      this.azimuts.push((this.previousAzimut + Math.floor(Math.random() * (2 * this.azimutSpeed + 1)) - this.azimutSpeed + 360) % 360);
      this.previousAzimut = this.azimuts[i]; // console.log(this.azimuts);
      // console.log("bonsoir");
    }

    this.currentAzimutIndex = 0; // this.Gains.gain.linearRampToValueAtTime(1, 0);
    // console.log("er")

    this.yell.start();
    this.moveId = setInterval(() => this.UpdatePos(), 1000);
  }

  UpdatePos() {
    if (this.currentAzimutIndex == this.lifeTime) {
      clearInterval(this.moveId);
      this.KillPlayer();
      return;
    }

    this.encoder.azim = this.azimuts[this.currentAzimutIndex]; // console.log(this.currentAzimutIndex)

    this.encoder.updateGains();
    this.currentAzimutIndex += 1;
    console.log(this.azimuts[this.currentAzimutIndex]); // this.Sources[i-1].connect(this.gain)
    // this.gain.connect(Encoders[i-1].in);
    // this.Encoders[i-1].out.connect(this.BinDecoders.in);
    // this.binDecoder.connect(this.audioContext.destination);
  }

  Shoot(azimutShootAngle) {
    return (Math.abs(this.azimuts[this.currentAzimutIndex] - azimutShootAngle) + 360) % 360;
  }

  Die() {
    clearInterval(this.moveId);
    this.disconnect();
    console.log("normalement c'est devant"); // this.encoder.out.disconnect(data.SoundOut.in);
    // console.log("Le monstre est mort");

    return;
  }

  KillPlayer() {
    console.log("You die");
  }

}

var _default = Monster;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNb25zdGVyIiwiY29uc3RydWN0b3IiLCJkYXRhIiwiYXVkaW9Db250ZXh0IiwiYXppbXV0cyIsImF6aW11dFNwZWVkIiwiU3BlZWQiLCJ5ZWxsIiwiY3JlYXRlQnVmZmVyU291cmNlIiwibG9vcCIsImJ1ZmZlciIsIlNvdW5kcyIsIk1hdGgiLCJjZWlsIiwicmFuZG9tIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsImxpZmVUaW1lIiwiTGlmZVRpbWUiLCJjdXJyZW50QXppbXV0SW5kZXgiLCJtb3ZlSWQiLCJhbWJpc29uaWNzIiwicmVxdWlyZSIsImdhaW4iLCJjcmVhdGVHYWluIiwiZW5jb2RlciIsIm1vbm9FbmNvZGVyIiwib3V0IiwiY29ubmVjdCIsIlNvdW5kT3V0IiwiaW4iLCJkaXNjb25uZWN0IiwiY29uc29sZSIsImxvZyIsInN0YXJ0Iiwic2V0VmFsdWVBdFRpbWUiLCJwdXNoIiwiZmxvb3IiLCJwcmV2aW91c0F6aW11dCIsImkiLCJzZXRJbnRlcnZhbCIsIlVwZGF0ZVBvcyIsImNsZWFySW50ZXJ2YWwiLCJLaWxsUGxheWVyIiwiYXppbSIsInVwZGF0ZUdhaW5zIiwiU2hvb3QiLCJhemltdXRTaG9vdEFuZ2xlIiwiYWJzIiwiRGllIl0sInNvdXJjZXMiOlsiTW9uc3Rlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLy8vXG4vLyBNb25zdGVyXG4vLy9cblxuY2xhc3MgTW9uc3RlciB7XG5cblx0Y29uc3RydWN0b3IgKGRhdGEsIGF1ZGlvQ29udGV4dCkge1xuXHRcdHRoaXMuYXppbXV0cyA9IFtdO1xuXHRcdHRoaXMuYXppbXV0U3BlZWQgPSBkYXRhLlNwZWVkO1xuXG5cdFx0dGhpcy55ZWxsID0gYXVkaW9Db250ZXh0LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xuXHRcdHRoaXMueWVsbC5sb29wID0gdHJ1ZTtcblx0XHR0aGlzLnllbGwuYnVmZmVyID0gZGF0YS5Tb3VuZHNbXCJNb25zdGVyU291bmRcIiArIE1hdGguY2VpbChNYXRoLnJhbmRvbSgpKihPYmplY3Qua2V5cyhkYXRhLlNvdW5kcykubGVuZ3RoKSldO1xuXHRcdFxuXHRcdHRoaXMubGlmZVRpbWUgPSBkYXRhLkxpZmVUaW1lO1xuXHRcdHRoaXMuY3VycmVudEF6aW11dEluZGV4ID0gbnVsbDtcblx0XHR0aGlzLm1vdmVJZCA9IG51bGw7XG5cblx0XHR0aGlzLmFtYmlzb25pY3MgPSByZXF1aXJlKCdhbWJpc29uaWNzJyk7XG5cdFx0dGhpcy5nYWluID0gYXVkaW9Db250ZXh0LmNyZWF0ZUdhaW4oKTtcblxuXHRcdHRoaXMuZW5jb2RlciA9IG5ldyB0aGlzLmFtYmlzb25pY3MubW9ub0VuY29kZXIoYXVkaW9Db250ZXh0LCAyKTtcblx0XHR0aGlzLmVuY29kZXIub3V0LmNvbm5lY3QoZGF0YS5Tb3VuZE91dC5pbik7XG5cblx0XHR0aGlzLmRpc2Nvbm5lY3QgPSAoKCkgPT4gZnVuY3Rpb24oKSB7Y29uc29sZS5sb2coXCJkZXZhbnRcIil9KVx0XHRcblxuXHR9XG5cblx0YXN5bmMgc3RhcnQgKCkge1xuXHRcdC8vIGNvbnNvbGUubG9nKFwiZ29cIilcblx0XHR0aGlzLmdhaW4uZ2Fpbi5zZXRWYWx1ZUF0VGltZSgwLjUsIDApO1xuXG5cdFx0dGhpcy55ZWxsLmNvbm5lY3QodGhpcy5nYWluKVxuXHRcdHRoaXMuZ2Fpbi5jb25uZWN0KHRoaXMuZW5jb2Rlci5pbilcblxuXHRcdHRoaXMuYXppbXV0cy5wdXNoKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSozNjEpKVxuXHRcdHRoaXMucHJldmlvdXNBemltdXQgPSB0aGlzLmF6aW11dHNbMF07XG5cdFx0Ly8gY29uc29sZS5sb2coXCJib25qb3VyXCIpXG5cdFx0Ly8gY29uc29sZS5sb2codGhpcy5saWZlVGltZSlcblx0XHRmb3IgKGxldCBpID0gMTsgaSA8PSB0aGlzLmxpZmVUaW1lOyBpKyspIHtcblx0XHRcdHRoaXMuYXppbXV0cy5wdXNoKCh0aGlzLnByZXZpb3VzQXppbXV0ICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKigyKnRoaXMuYXppbXV0U3BlZWQgKyAxKSkgLSB0aGlzLmF6aW11dFNwZWVkICsgMzYwKSUzNjApO1xuXHRcdFx0dGhpcy5wcmV2aW91c0F6aW11dCA9IHRoaXMuYXppbXV0c1tpXTtcblx0XHRcdC8vIGNvbnNvbGUubG9nKHRoaXMuYXppbXV0cyk7XG5cdFx0XHQvLyBjb25zb2xlLmxvZyhcImJvbnNvaXJcIik7XG5cdFx0fVxuXHRcdHRoaXMuY3VycmVudEF6aW11dEluZGV4ID0gMDtcblx0XHQvLyB0aGlzLkdhaW5zLmdhaW4ubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoMSwgMCk7XG5cdFx0Ly8gY29uc29sZS5sb2coXCJlclwiKVxuXHRcdHRoaXMueWVsbC5zdGFydCgpO1xuXHRcdHRoaXMubW92ZUlkID0gc2V0SW50ZXJ2YWwoKCkgPT4gdGhpcy5VcGRhdGVQb3MoKSwgMTAwMCk7XG5cdH1cblxuXHRVcGRhdGVQb3MoKSB7XG5cdFx0aWYodGhpcy5jdXJyZW50QXppbXV0SW5kZXggPT0gdGhpcy5saWZlVGltZSkge1xuXHRcdFx0Y2xlYXJJbnRlcnZhbCh0aGlzLm1vdmVJZCk7XG5cdFx0XHR0aGlzLktpbGxQbGF5ZXIoKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dGhpcy5lbmNvZGVyLmF6aW0gPSB0aGlzLmF6aW11dHNbdGhpcy5jdXJyZW50QXppbXV0SW5kZXhdO1xuXHRcdC8vIGNvbnNvbGUubG9nKHRoaXMuY3VycmVudEF6aW11dEluZGV4KVxuXHRcdHRoaXMuZW5jb2Rlci51cGRhdGVHYWlucygpO1xuXHRcdHRoaXMuY3VycmVudEF6aW11dEluZGV4ICs9IDE7XG5cdFx0Y29uc29sZS5sb2codGhpcy5hemltdXRzW3RoaXMuY3VycmVudEF6aW11dEluZGV4XSlcblxuXG4gICAgICBcdC8vIHRoaXMuU291cmNlc1tpLTFdLmNvbm5lY3QodGhpcy5nYWluKVxuICAgICAgXHQvLyB0aGlzLmdhaW4uY29ubmVjdChFbmNvZGVyc1tpLTFdLmluKTtcblxuICAgICAgXHQvLyB0aGlzLkVuY29kZXJzW2ktMV0ub3V0LmNvbm5lY3QodGhpcy5CaW5EZWNvZGVycy5pbik7XG4gICAgICBcdC8vIHRoaXMuYmluRGVjb2Rlci5jb25uZWN0KHRoaXMuYXVkaW9Db250ZXh0LmRlc3RpbmF0aW9uKTtcblx0fVxuXG5cdFNob290KGF6aW11dFNob290QW5nbGUpIHtcblx0XHRyZXR1cm4gKChNYXRoLmFicygodGhpcy5hemltdXRzW3RoaXMuY3VycmVudEF6aW11dEluZGV4XSAtIGF6aW11dFNob290QW5nbGUpKSArIDM2MCklMzYwKTtcblx0fVxuXG5cdERpZSgpIHtcblx0XHRjbGVhckludGVydmFsKHRoaXMubW92ZUlkKTtcblx0XHR0aGlzLmRpc2Nvbm5lY3QoKVxuXHRcdGNvbnNvbGUubG9nKFwibm9ybWFsZW1lbnQgYydlc3QgZGV2YW50XCIpXG5cdFx0Ly8gdGhpcy5lbmNvZGVyLm91dC5kaXNjb25uZWN0KGRhdGEuU291bmRPdXQuaW4pO1xuXHRcdC8vIGNvbnNvbGUubG9nKFwiTGUgbW9uc3RyZSBlc3QgbW9ydFwiKTtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRLaWxsUGxheWVyKCkge1xuXHRcdGNvbnNvbGUubG9nKFwiWW91IGRpZVwiKVxuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1vbnN0ZXI7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFFQSxNQUFNQSxPQUFOLENBQWM7RUFFYkMsV0FBVyxDQUFFQyxJQUFGLEVBQVFDLFlBQVIsRUFBc0I7SUFDaEMsS0FBS0MsT0FBTCxHQUFlLEVBQWY7SUFDQSxLQUFLQyxXQUFMLEdBQW1CSCxJQUFJLENBQUNJLEtBQXhCO0lBRUEsS0FBS0MsSUFBTCxHQUFZSixZQUFZLENBQUNLLGtCQUFiLEVBQVo7SUFDQSxLQUFLRCxJQUFMLENBQVVFLElBQVYsR0FBaUIsSUFBakI7SUFDQSxLQUFLRixJQUFMLENBQVVHLE1BQVYsR0FBbUJSLElBQUksQ0FBQ1MsTUFBTCxDQUFZLGlCQUFpQkMsSUFBSSxDQUFDQyxJQUFMLENB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