"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _client = require("@soundworks/core/client");

var _litHtml = require("lit-html");

var _renderInitializationScreens = _interopRequireDefault(require("@soundworks/template-helpers/client/render-initialization-screens.js"));

var _Monster = _interopRequireDefault(require("./Monster.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class PlayerExperience extends _client.AbstractExperience {
  constructor(client, config = {}, $container) {
    super(client);
    this.config = config;
    this.$container = $container;
    this.rafId = null;
    this.filesystem = this.require('filesystem'); // this.audioBufferLoader = this.require('audio-buffer-loader');
    // require plugins if needed

    this.audioBufferLoader = this.require('audio-buffer-loader');
    this.ambisonics = require('ambisonics');
    console.log(this.audioBufferLoader);
    this.initialising = true;
    this.audioContext = new AudioContext();
    this.monsters = {
      List: [],
      LifeTime: 10,
      Speed: 10,
      SpawnRate: 10,
      Scream: null,
      SoundOut: null
    };
    this.azimutAim = 180;
    this.azimutPrecision = 180;
    this.playerGain = this.audioContext.createGain();
    (0, _renderInitializationScreens.default)(client, config, $container);
  }

  async start() {
    super.start();
    this.monsters.Scream = await this.audioBufferLoader.load({
      'MonsterSound1': 'Audio/Monster1.mp3',
      'MonsterSound2': 'Audio/Monster2.mp3',
      'MonsterSound3': 'Audio/Monster3.mp3',
      'MonsterSound4': 'Audio/Monster4.mp3',
      'MonsterSound5': 'Audio/Monster5.mp3'
    }, true);
    this.soundBank = await this.audioBufferLoader.load({
      'MonsterDie': 'Audio/MonsterDie.wav',
      'Shoot': 'Audio/Kill.mp3'
    }, true);
    this.monsters.SoundOut = new this.ambisonics.binDecoder(this.audioContext, 2);
    this.playerGain.connect(this.audioContext.destination);
    this.monsters.SoundOut.out.connect(this.audioContext.destination);
    window.addEventListener('resize', () => this.render());
    this.render();
  }

  loadSoundbank() {
    const soundbankTree = this.filesystem.get('soundbank');
    const defObj = {};
    soundbankTree.children.forEach(leaf => {
      if (leaf.type === 'file') {
        defObj[leaf.name] = leaf.url;
      }
    });
    this.audioBufferLoader.load(defObj, true);
  }

  render() {
    // debounce with requestAnimationFrame
    window.cancelAnimationFrame(this.rafId);
    this.rafId = window.requestAnimationFrame(() => {
      (0, _litHtml.render)((0, _litHtml.html)`
        <div style="padding: 20px">
          <h1 style="margin: 20px 0">${this.client.type} [id: ${this.client.id}]</h1>
        </div>
        <div>
        <input type="button" id="beginButton" value="Validate"/>
        </div>
        <div>
        <input type="button" id="shootButton" value="Shoot" style="width: 200px; height: 200px;"/>
        </div>
        <div>
        <input type="range" id="sliderAzimAim" min=0 max=360 value=${this.azimutAim}/>${this.azimutAim}
        </div>
      `, this.$container); // assign callbacks

      if (this.initialising) {
        this.beginButton = document.getElementById("beginButton");
        this.beginButton.addEventListener("click", () => {
          this.onBeginClicked();
        });
        var shootButton = document.getElementById("shootButton");
        shootButton.addEventListener("click", () => {
          this.onShootClicked();
        });
        var slider = document.getElementById("sliderAzimAim");
        slider.addEventListener("input", () => {
          this.azimutAim = slider.value;
          this.render(); // this.onAzimAimChange(slider.value);
        });
        this.initialising = false;
      }
    });
  }

  onBeginClicked() {
    console.log("de");
    console.log(this);
    setInterval(() => {
      console.log(this.monsters);
      this.monsters.List.push(new _Monster.default(this.monsters, this.audioContext)); // console.log(this.monsterList)

      this.monsters.List[this.monsters.List.length - 1].start(); // this.monsterTemplate += 2;
    }, 1000 * this.monsters.SpawnRate);
  }

  onShootClicked() {
    var killing = false;
    var iterator = 0;
    this.Play(this.soundBank.Shoot);

    while (iterator < this.monsters.List.length && this.monsters.List[iterator].Shoot(this.azimutAim) > this.azimutPrecision) {
      iterator += 1;
    }

    if (iterator < this.monsters.List.length) {
      console.log("You kill a monster");
      this.Play(this.soundBank.MonsterDie);
      this.monsters.List[iterator].Die();
      this.monsters.List.splice(iterator, 1);
      console.log(this.monsters.List);
    } else {
      console.log("You miss your shoot");
      this.monsters.List = [];
    }
  }

  Play(buffer) {
    var Sound = this.audioContext.createBufferSource();
    Sound.loop = false;
    Sound.buffer = buffer;
    Sound.connect(this.playerGain);
    Sound.addEventListener('ended', () => {
      Sound.disconnect(this.playerGain);
    });
    Sound.start();
  }

}

var _default = PlayerExperience;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,